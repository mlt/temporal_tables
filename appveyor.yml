pull_requests:
  do_not_increment_build_number: true
os: Visual Studio 2017
configuration: Release
platform: x64
clone_depth: 1
environment:
  PGUSER: postgres
  PGPASSWORD: Password12!
  matrix:
  - pg: 12.3-2
    PlatformToolset: v140
  - pg: master
    PlatformToolset: v141
    configuration: Debug
  - pg: 11.8-2
    PlatformToolset: v140
matrix:
  allow_failures:
    - pg: master


init: # Make %exe% available for caching
- ps: |
    $env:exe = "postgresql-$env:pg-windows-x64.exe"
    [Environment]::SetEnvironmentVariable("exe", $env:exe, "Machine")

install:
- ps: |
    # http://www.databasesoup.com/2016/05/changing-postgresql-version-numbering.html
    $env:pgversion = $env:pg -replace "\.\d+-\d+$", ""
    $env:pgroot = "$env:ProgramFiles\PostgreSQL\$env:pgversion"
    if ("$env:pg" -notmatch "\.") {
      $env:Path += ";C:\msys64\usr\bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64"
      git clone -q --depth 1 --branch $env:pg https://git.postgresql.org/git/postgresql.git c:\projects\postgresql
      pushd c:\projects\postgresql
      perl src\tools\msvc\build.pl
      perl src\tools\msvc\install.pl "$env:pgroot"
      popd
    } else {
      if (-not (Test-Path "$env:pgroot\bin")) {
        if (-not (Test-Path "$env:exe")) {
          Start-FileDownload "http://get.enterprisedb.com/postgresql/$env:exe"
        }
        & ".\$env:exe" --unattendedmodeui none --mode unattended --superpassword "$env:PGPASSWORD" --servicepassword "$env:PGPASSWORD" | Out-Null
        Stop-Service "postgresql-x64-$env:pgversion"
      }
      & dumpbin /imports $env:pgroot\bin\postgres.exe | findstr /i vcruntime | Write-Output "Linked runtime: $_"
    }

cache:
- '%exe%'

build_script:
- msbuild /p:PlatformToolset=%PlatformToolset% /p:configuration=%CONFIGURATION% /p:platform=%PLATFORM%
          temporal_tables.vcxproj
          /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

after_build:
- ps: |
    $dll = "x64\$env:CONFIGURATION\temporal_tables.dll"
    Add-AppveyorMessage Packing -Category Information
    New-Item -Name tmp\share\extension -ItemType "directory"
    Copy-Item "*.sql" -Destination tmp\share\extension\
    Copy-Item "*.control" -Destination tmp\share\extension\
    Copy-Item LICENSE -Destination tmp\TEMPORAL_TABLES_LICENSE
    New-Item -Name tmp\lib -ItemType "directory"
    New-Item -Name tmp\debug_symbols -ItemType "directory"
    Copy-Item $dll -Destination tmp\lib
    Copy-Item ($dll -replace "\.dll", ".pdb") -Destination tmp\debug_symbols
    if ($env:APPVEYOR_REPO_TAG -eq "false") {
      $env:APPVEYOR_REPO_TAG_NAME=${env:APPVEYOR_REPO_COMMIT}.SubString(0,8)
    }
    $zip = "temporal_tables-$env:APPVEYOR_REPO_TAG_NAME-pg$env:pgversion-windows-$env:PLATFORM.zip"
    Compress-Archive -Path ".\tmp\*" -DestinationPath $zip

test_script:
- ps: |
    $env:path += ";$env:pgroot\bin"
    Add-AppveyorMessage "Copying the extension files to the PostgreSQL directories." -Category Information
    Expand-Archive -LiteralPath $zip -DestinationPath $env:pgroot
    if ("$env:pg" -notmatch "\.") {
      Set-Content -path pg.pass -value "$env:pgpassword" -encoding ascii
      initdb -A md5 -U "$env:PGUSER" --pwfile=pg.pass C:\pgdata
      pg_ctl register -S demand -N "postgresql-x64-$env:pgversion" -D c:\pgdata
    }
    Start-Service postgresql-x64-$env:pgversion
    Add-AppveyorTest Regression -Framework pg_regress -FileName sql\ -Outcome Running
    $env:Outcome="Passed"
    $elapsed=(Measure-Command {
      pg_regress "--bindir=$env:pgroot\bin" --dbname=pl_regression `
             install no_system_period invalid_system_period no_history_table `
             no_history_system_period invalid_types invalid_system_period_values `
             plain_version `
             versioning versioning_custom_system_time structure uninstall 2>&1 |
        %{ if ($_ -is [System.Management.Automation.ErrorRecord]) { $_.Exception.Message } else { $_ } } |
          Out-Default
      if ($LASTEXITCODE -ne 0) {
        $env:Outcome="Failed"
      }
    }).TotalMilliseconds
    Update-AppVeyorTest Regression -Framework pg_regress -FileName sql\ -Outcome "$env:Outcome" -Duration $elapsed
    if ("$env:Outcome" -ne "Passed") {
      type regression.diffs
      $host.SetShouldExit($LastExitCode)
    }

artifacts:
- path: '*.zip'

deploy:
    # Deploy to GitHub Releases
  - provider: GitHub
    draft: true
    prerelease: false
    auth_token:
      secure: pR/CfKkATG5dbsaTAJS2WsKC+OBuli4eMe3hSylaNUMnvvjUEXmfIseZF+//1d/j
    on:
      appveyor_repo_tag: true       # deploy on tag push only
